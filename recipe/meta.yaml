{% set name = "polars" %}
{% set version = "0.20.18" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/polars-{{ version }}.tar.gz
    sha256: 8a321cbdbb459e3c0cc1af2ce6ac930d0d3b5ccbeb2dd3e4237ad07d487fd290

build:
  number: 0
  # no rust nightly compiler for s390x
  skip: true  # [s390x]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('rust') }}
    - python
    - posix   # [win]
    - cmake
    - make    # [unix]
    - cargo-bundle-licenses
  host:
    - python
    - pip
    - maturin 1.5.1
  run:
    - python
    - numpy >=1.16.0
    - backports.zoneinfo                   # [py<39]
    - typing_extensions >=4.0.0            # [py<311]
    - packaging                            # [py>=310]

test:
  imports:
    - polars
  commands:
    - pip check
    - python -c "from polars import DataFrame"
  requires:
    - pip

about:
  home: https://github.com/pola-rs/polars
  license: MIT
  license_family: MIT
  license_file:
    - LICENSE
    - THIRDPARTY.yml
  summary: Polars is a blazingly fast DataFrames library implemented in Rust using Apache Arrow(2) as memory model.
  description: |
    Polars is a blazingly fast DataFrame library for manipulating structured data. The core is written in Rust, and
    available for Python, R and NodeJS.
    Key features:
      * Fast: Written from scratch in Rust, designed close to the machine and without external dependencies.
      * I/O: First class support for all common data storage layers: local, cloud storage & databases.
      * Intuitive API: Write your queries the way they were intended. Polars, internally, will determine the most efficient way to execute using its query optimizer.
      * Out of Core: The streaming API allows you to process your results without requiring all your data to be in memory at the same time
      * Parallel: Utilises the power of your machine by dividing the workload among the available CPU cores without any additional configuration.
      * Vectorized Query Engine: Using Apache Arrow, a columnar data format, to process your queries in a vectorized manner and SIMD to optimize CPU usage.
  doc_url: https://pola-rs.github.io/polars-book/user-guide/index.html
  dev_url: https://github.com/pola-rs/polars

extra:
  recipe-maintainers:
    - borchero
    - Maxyme
    - timkpaine
    - ritchie46
    - sugatoray
    - xhochy
    - dhirschfeld
    - pavelzw
    - '0xbe7a'